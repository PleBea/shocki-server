// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  KAKAO
  PHONE
}

model User {
  id          String       @id @default(uuid())
  provider    Provider
  providerId  String
  password    String?
  Address     Address[]
  Alert       Alert[]
  productQnA  ProductQnA[]
  fundingLog  FundingLog[]
  UserAccount UserAccount?
  Product     Product[]
}

model UserAccount {
  id                         String                       @id @default(uuid())
  userId                     String                       @unique
  user                       User                         @relation(fields: [userId], references: [id])
  credit                     Int                          @default(0)
  UserTokenBalancesOnProduct UserTokenBalancesOnProduct[]
}

model Address {
  id            String @id @default(uuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  name          String
  phone         String // +821012345678
  address       String
  detailAddress String @default("")
}

model Category {
  id                  String                @id @default(uuid())
  name                String                @unique
  categoriesOnProduct CategoriesOnProduct[]
}

model Alert {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  type      Int
  createdAt DateTime @default(now())
}

enum ProductType {
  FUNDING
  SELLING
}

model Product {
  id                         String                       @id @default(uuid())
  ownerId                    String
  user                       User                         @relation(fields: [ownerId], references: [id])
  name                       String
  image                      String
  detailImage                String
  type                       ProductType                  @default(FUNDING)
  currentAmount              Int
  targetAmount               Int
  collectedAmount            Int
  fundingEndDate             DateTime
  productQnA                 ProductQnA[]
  fundingLog                 FundingLog[]
  categories                 CategoriesOnProduct[]
  UserTokenBalancesOnProduct UserTokenBalancesOnProduct[]
}

model FundingLog {
  id        Int      @id @default(autoincrement())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  createdAt DateTime @default(now())
}

model CategoriesOnProduct {
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

enum ProductQnAAuthorType {
  BUYER
  SELLER
}

model ProductQnA {
  id         String               @id @default(uuid())
  productId  String
  product    Product              @relation(fields: [productId], references: [id])
  authorType ProductQnAAuthorType
  authorId   String
  user       User                 @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime             @default(now())
}

model UserTokenBalancesOnProduct {
  id            String      @id @default(uuid())
  userAccountId String
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  token         Int         @default(0)
  createdAt     DateTime    @default(now())
}
