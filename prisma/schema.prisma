// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
  KAKAO
  EMAIL
}

model User {
  id         String       @id @default(uuid())
  provider   Provider
  providerId String?
  phone      String?
  password   String?
  Address    Address[]
  Alert      Alert[]
  ProductQnA ProductQnA[]
}

model Address {
  id            String @id @default(uuid())
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  name          String
  phone         String // +821012345678
  address       String
  detailAddress String @default("")
}

model Category {
  id              String            @id @default(uuid())
  name            String            @unique
  ProductCategory ProductCategory[]
}

model Alert {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  type      Int
  createdAt DateTime @default(now())
}

enum ProductType {
  FUNDING
  SELLING
}

model Product {
  id              String            @id @default(uuid())
  name            String
  image           String
  ProductCategory ProductCategory[]
  type            ProductType
  currentAmount   Int
  targetAmount    Int
  collectedAmount Int
  fundingEndDate  Int
  ProductQnA      ProductQnA[]
}

model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

enum ProductQnAAuthorType {
  BUYER
  SELLER
}

model ProductQnA {
  id         String               @id @default(uuid())
  productId  String
  product    Product              @relation(fields: [productId], references: [id])
  authorType ProductQnAAuthorType
  authorId   String
  user       User                 @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime             @default(now())
}
